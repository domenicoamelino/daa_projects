\documentclass[../tesi.tex]{subfiles}
\graphicspath{{../}}

%\usepackage[english]{babel}
\selectlanguage{english}%

\begin{document}
\chapter{IP Violations in Computer Technology}
\begin{quotation}
\emph{In this Chapter our focus is on IP violations and on the methods involved to infringe IP rights designed for FPGA technology. Therefore, in the following Sections we provide a detailed analysis of FPGA defense mechanisms and of known attacks which may represent a threat to hardware design.}
\end{quotation}

During the life-cycle of an electronic system, intellectual properties can be vulnerable to various security issues, and in particular software piracy has always drawn great attention. However, securing the hardware on which the software runs is even more important. To this aim, a Xilinx whitepaper \cite{xilinxwhitepaper} discusses the following threats to hardware design:
\begin{itemize}
	\item \textbf{Cloning} (or \textbf{Counterfeiting}) -- the attacker intends to copy and resell a design, avoiding the burden of development costs;
	\item \textbf{Reverse engineering} -- the attacker intends to understand a design by deeply examining it, with the goal of either reconstructing it for future developments and/or resales or extracting secret information;
	\item \textbf{Tampering} -- the attacker attempts to gain unauthorized access to an electronic system by modifying its original design. If the intention is to sabotage an electronic system, tampering can also be intentionally harmful;
	\item \textbf{Overbuilding} -- a subcontractor builds more units than have been ordered for fabrication by a system designer, and sells the excess to the \textit{black market} at lower price.
\end{itemize}
While the goal of cloning and overbuilding might be to make cheaper products and to gain from them, reverse engineering might be done in order to offer better products than a competitor. At the same time, tampering might be performed either to ease the reverse engineering process or to sabotage a competitor, which falls within dishonest competition and denial of business.\\
\indent
Additionally, counterfeit components not only involve a loss of profits for a system designer, but they are also a potential threat to public safety, since they are often produced from poorly controlled manufacturing processes in order to reduce their cost. Moreover, counterfeit components are more likely to cause the failure of the system in which they are adopted.

\section{FPGA Vulnerabilities and Countermeasures}

The next Subsections list the most relevant FPGA vulnerabilities and attacks known in the literature. FPGA defense mechanisms and countermeasures are also discussed for each attack.


\subsection{Readback Attack}
There are several debugging methods available for FPGA design, and the most common exploit JTAG interface. This protocol allows a designer to perform board or system testing, diagnosis, and fault isolation. In particular, the JTAG protocol can implement the \textit{readback} functionaly, which allows a designer to read out on-demand the program (configuration memory) and data in the FPGA. While this mechanism has been developed for test purposes, it can be maliciously exploited to perform IP rights infringement.\\
\indent
An attacker who attempts to perform a readback attack is not able to retrieve the original bitstream used to program the FPGA. However, the attacker is able to obtain a \textit{snapshot} of the FPGA status. Therefore, the intention is to read the current FPGA configuration in order to adding what is missing and eventually to rebuild the original bitstream.\\
\indent
Most common FPGA families allow to disable the readback functionality once the FPGA has to be deployed. Typically, the readback deactivation is performed by one-time programming anti-fuses, which disable the access to the FPGA configuration. However, generally, disabling the readback functionality also involves the disabling of other debugging functionality. This is the case of Xilinx FPGAs, which allow a designer to instantiate hardware probes, by means of \textit{ChipScope Tools}. In order to work, ChipScope probes require that the readback functionality is enabled.


\subsection{Cloning FPGA Configuration File\label{sec:bitstreamencryption}}
Most common FPGAs are SRAM-based, implying that they do not keep their configuration permanently. Therefore, each time FPGAs are powered-up they have to be reprogrammed. To this aim, Computer-Aided Design (CAD) tools of FPGA vendors generate a FPGA configuration file, namely \textit{bitstream}, which contains the FPGA configuration relative to the instantiated user design. Therefore, a FPGA can be programmed using a bitstream file generated by the system designer using the tools of the FPGA vendor. The size of bitstream files depends only on FPGA resources and not on the instantiated design, and typically bitstream size varies from few kBytes to some MBytes.\\
\indent
This mechanism introduces a new security threat concerning the cloning of the bitstream. Before bitstream encryption, two methods were used to protect SRAM bitstreams \cite{trimberger2014fpga}. The first method consists of loading the FPGA at a secure location and involves the use of a battery to hold the configuration bitstream for the entire FPGA lifetime. The bitstream security is assured by disabling the readback functionality and by never exposing outside the device. However, in some cases these security requirements can not be satisfied. Additionally, the main drawback of this method is that the system has to be always powered-up.\\
\indent
The second method of bitstream protection consists of using an external memory with a unique identifier, such as Xilinx DNA \cite{devicedna}. In particular, the FPGA program is customized in order to require that identifier each time the FPGA is programmed. However, while this method defeats the cloning of the FPGA configuration file, the bitstream for each device is unique and may complicates the manufacturing process. Moreover, the design can be copied by an attacker who reverse engineers the bitstream and rebuilds it without the check logic.\\
\indent
However, both these methods are susceptible to eavesdrop attacks performed during the programming phase. In order to protect FPGA designs against IP theft and related issues such as product cloning, all major FPGA manufacturers offer a mechanism to encrypt the bitstream used to configure the FPGA. Indeed, modern FPGAs include built-in decryption engines which allow a designer to program the FPGA using an encrypted bitstream. In particular, the FPGA designer implements and synthesizes its design, and enciphers it with a user-defined key (Figure~\ref{fig:bitstreamencryption}. The key used for encryption and decryption is typically stored in external anti-tamper memories, such as battery-backed RAM (BBRAM) or eFuses, which can not be read but from the FPGA configuration controller.\\
\indent
\begin{figure}[h]
	\centering
	\includegraphics[width=0.50\columnwidth]{images/bitstreamencryption.png}
	\caption{Design flow with the encryption mechanisms and user-defined key.}
	\label{fig:bitstreamencryption}
\end{figure}
Using this scheme, each time the FPGA has to be programmed with an enciphered bitstream, the FPGA configuration controller decrypts it with the user-defined key and programs the FPGA.\\
\indent
Threfore, even if an attacker is able to retrieve the bitstream file, it will be not able to access the original content without knowing the key used to encipher it.\\
\indent
However, also bitstream encryption mechanisms are susceptible to attacks. In particular, it has been shown that the bitstream encryption feature of several FPGA product lines is susceptible to side-channel attacks that mainly monitor the power consumption of the cryptographic module. Indeed, in literature there are reported some successful attacks, which targeted all FPGA families, such as Xilinx Virtex-II Pro \cite{moradi2011vulnerability}, Virtex-4, Virtex-5 and Spartan-6 \cite{moradi20111}, Actel/Microsemi ProASIC3 \cite{skorobogatov2005semi}, and Altera Stratix II \cite{moradi2013side}.\\
\indent
Side-channel attack technique is described in the next Sections.

\subsection{Bitstream reverse engineering attack}
In all of the attacks described above we referred to bitstream reverse engineering, which consists of extracting design details in order to extract secret information and/or to reproduce the original bitstream. Indeed, the bistream contains the configuration bits that program both the configurable logic and routing paths as established by the user design.\\
\indent
FPGA vendors do not release any information about the structure and the format of a bitstream. Therefore, the process of reverse engineering a bitstream may be complicated. However, security-by-obscuring is an approach that may be susceptible to affordable attacks. Indeed, \textit{debit} software \cite{debit} is a tool which is able to reverse engineer various FPGAs bitstreams. However, this tool does not reverse engineer the bitstream itself, but it is only able to obtain the netlist related to the original HDL project. Furthermore, additional tools \cite{trimberger2014fpga, jbits} have been developed which hack the bitstream generation software tool in order to generate bitstreams able to be configured on FPGAs of Xilinx and Altera, respectively. However, reverse engineering activity might violate the end-user license agreement (EULA). Indeed, the companies that developed the tools reported above have been sued or acquired from FPGA vendors, and their projects have been discontinued.\\
\indent
Additionally, further factors that may discourage an adversary to attempt a reverse engineering attack are the increasing complexity and size of modern FPGAs, and the diversity between them.


\subsection{Side-Channel Attacks}
Side-channel attacks (SCAs) exploit physical information leakage of an implementation in order to extract secret information, in particular the cryptographic key used. Most common SCAs are based on power analysis and on electromagnetic emanation analysis.\\
\indent
With regard to power analysis, the basic idea is to correlate the power consumed by the device and the 
encryption data including the key. Indeed, in CMOS technology the main source of power consumption is caused by the commutation of \textit{p} and \textit{n} CMOS transistors. In particular, 1$\rightarrow$0 state transitions are characterized by a different current intensity compared to 0$\rightarrow$1 transitions. These differences are the base of the differential power analysis (DPA), which may allow an attacker build a model able to correlate the different power consumption with internal operation states, retrieving the targeted crytographic key. DPA-based attacks are extremely powerful since they only require the knowledge of the algorithm, but not its physical implementation. Moreover, contrary to mathematical or brute-force attacks, where typically pairs of plaintexts and ciphertexts are required for the key extraction, SCAs require only one of them. Besides the attacks described in Section~\ref{sec:bitstreamencryption}, in literature there are some succesful side-channel attacks which targeted cryptographic primitives implemented on FPGA, such as elliptic curve engine \cite{ors2003power}, and AES and DES implementation \cite{standaert2004power}.\\
\indent
Countermeasures are based on removing the correlation between processed data and the physical interface. In particular, authors in \cite{tiri2004synthesis} presented the wave dynamic differential logic technique, which consists of dissipating the power independently from the logic transistor using the differential logic, such that one logic works exactly in opposite from boolean-logic values point-of-view, and the pre-charging of gates. Besides the expensive resource utilization, even this technique is susceptible to attacks since differential logic will always have some observable power variability due to imperfections introduced during the ICs manufacturing process. Alternatives may consist of adding random power consumption, random dummy calculations or logic masking, at the expense of design complexity, resource utilization and power consumption.
\\
\indent

Another side channel attack is the one that exploits the Electromagnetic (EM) emanations of an operating device. Indeed, based on the same concept described above, these emanations are correlated with the current flowing through the device. In order to exploit the electromagnetic emanations, EM attacks exploit differential electromagnetic analysis (DEMA) and use fine-tuned antennas (Figure~\ref{fig:antenna}) which amplify the electromagnetic signal emitted from the device. In the literature, there are some succesful DEMA attacks which targeted the FPGA AES implementation \cite{carlier2004electromagnetic} and the elliptic curve crypto-engine synthesized on FPGA \cite{de2005electromagnetic}.
\begin{figure}[h]
	\centering
	\includegraphics[width=0.70\columnwidth]{images/antenna.png}
	\caption{An example of measurement setup: the antenna is placed parallel to the FPGA \cite{de2005electromagnetic}.}
	\label{fig:antenna}
\end{figure}




\end{document}